# Generated by Django 5.2 on 2025-05-03 19:18

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ConstructionProject',
            fields=[
                ('project_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000)),
                ('status', models.CharField(choices=[('planned', 'Запланирован'), ('in_progress', 'В процессе'), ('completed', 'Завершён'), ('cancelled', 'Отменён')], default='planned', max_length=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(default='Москва', max_length=100)),
            ],
            options={
                'db_table': 'Construction_Project',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('resource_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('material', 'Материал'), ('equipment', 'Оборудование'), ('human', 'Персонал')], max_length=10)),
                ('quantity', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('remains', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'Resource',
            },
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('id_weather', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(unique=True)),
                ('temp', models.FloatField()),
                ('wind_power', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('pressure', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)])),
                ('rainfall', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('rel_humidity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
            options={
                'db_table': 'Weather',
            },
        ),
        migrations.CreateModel(
            name='Models',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_name', models.CharField(max_length=50)),
                ('num_epoch', models.IntegerField()),
                ('batch_size', models.IntegerField()),
                ('slide_window', models.IntegerField()),
                ('name_neural', models.CharField(choices=[('lstm', 'LSTM'), ('gru', 'GRU'), ('linear', 'Linear Regression')], max_length=30)),
                ('file_name', models.CharField(blank=True, max_length=30)),
                ('file_path', models.TextField(blank=True)),
                ('project', models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, to='planning.constructionproject')),
            ],
            options={
                'db_table': 'Models',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('task_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=1000)),
                ('estimated_duration', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('work_type', models.CharField(choices=[('AT_1', 'Основные строительные конструкции'), ('AT_2', 'Технологическое оборудование'), ('AT_3', 'Инженерные сети'), ('AT_4', 'Земляные работы и фундаменты'), ('AT_5', 'Защитные покрытия'), ('AT_6', 'Испытания и контроль'), ('AT_7', 'Электромонтаж'), ('AT_8', 'Сварка трубопроводов'), ('AT_9', 'Опоры и мачты'), ('AT_10', 'Дорожные работы'), ('AT_11', 'Спецработы на трубопроводах'), ('AT_12', 'Армирование и металлоконструкции'), ('AT_13', 'Вспомогательные работы'), ('AT_14', 'Пуско-наладочные работы'), ('AT_15', 'Магистральные трубопроводы')], max_length=20)),
                ('project', models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, to='planning.constructionproject')),
                ('resource', models.ForeignKey(db_column='resource_id', on_delete=django.db.models.deletion.CASCADE, to='planning.resource')),
            ],
            options={
                'db_table': 'Task',
            },
        ),
        migrations.CreateModel(
            name='TaskDependency',
            fields=[
                ('dependency_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('FS', 'Finish-to-Start'), ('SS', 'Start-to-Start'), ('FF', 'Finish-to-Finish'), ('SF', 'Start-to-Finish')], max_length=2)),
                ('dependent_task', models.ForeignKey(db_column='dependent_task_id', on_delete=django.db.models.deletion.CASCADE, related_name='dependent_on', to='planning.task')),
                ('task', models.ForeignKey(db_column='task_id', on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='planning.task')),
            ],
            options={
                'db_table': 'Task_Dependency',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id_staff', models.AutoField(primary_key=True, serialize=False)),
                ('quantity_staff', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('labour', models.BooleanField()),
                ('resource', models.ForeignKey(db_column='resource_id', on_delete=django.db.models.deletion.CASCADE, to='planning.resource')),
                ('date', models.ForeignKey(db_column='date', on_delete=django.db.models.deletion.CASCADE, to='planning.weather', to_field='date')),
            ],
            options={
                'db_table': 'Staff',
            },
        ),
        migrations.CreateModel(
            name='ResourceRemains',
            fields=[
                ('id_remains', models.AutoField(primary_key=True, serialize=False)),
                ('output', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('resource', models.ForeignKey(db_column='resource_id', on_delete=django.db.models.deletion.CASCADE, to='planning.resource')),
                ('task', models.ForeignKey(db_column='task_id', on_delete=django.db.models.deletion.CASCADE, to='planning.task')),
                ('date', models.ForeignKey(db_column='date', on_delete=django.db.models.deletion.CASCADE, to='planning.weather', to_field='date')),
            ],
            options={
                'db_table': 'Resource_remains',
            },
        ),
        migrations.CreateModel(
            name='ProjectProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('daily_progress', models.FloatField(default=0)),
                ('cumulative_progress', models.FloatField(default=0)),
                ('man_hours', models.FloatField(default=0)),
                ('machine_hours', models.FloatField(default=0)),
                ('project', models.ForeignKey(db_column='project_id', on_delete=django.db.models.deletion.CASCADE, to='planning.constructionproject')),
            ],
            options={
                'verbose_name_plural': 'Project Progress',
                'db_table': 'project_progress',
                'unique_together': {('project', 'date')},
            },
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('end_date__gte', models.F('start_date'))), name='task_end_after_start'),
        ),
        migrations.AddConstraint(
            model_name='taskdependency',
            constraint=models.CheckConstraint(condition=models.Q(('task', models.F('dependent_task')), _negated=True), name='no_self_dependency'),
        ),
        migrations.AddIndex(
            model_name='resourceremains',
            index=models.Index(fields=['task', 'date'], name='Resource_re_task_id_5a9b70_idx'),
        ),
    ]
